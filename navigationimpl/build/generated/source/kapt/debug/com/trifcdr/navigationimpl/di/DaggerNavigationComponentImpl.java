// Generated by Dagger (https://dagger.dev).
package com.trifcdr.navigationimpl.di;

import androidx.navigation.NavController;
import com.trifcdr.authorization.navigation.AuthorizationDirections;
import com.trifcdr.navigationapi.NavigationApi;
import com.trifcdr.navigationimpl.NavigationActivityProvider;
import com.trifcdr.navigationimpl.navigatiomnapis.AuthorizationNavigationImpl;
import dagger.internal.DaggerGenerated;
import dagger.internal.Preconditions;
import dagger.internal.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class DaggerNavigationComponentImpl {
  private DaggerNavigationComponentImpl() {
  }

  public static NavigationComponentImpl.Factory factory() {
    return new Factory();
  }

  private static final class Factory implements NavigationComponentImpl.Factory {
    @Override
    public NavigationComponentImpl create(NavigationDependenciesImpl dependencies) {
      Preconditions.checkNotNull(dependencies);
      return new NavigationComponentImplImpl(new NavigationModuleImpl(), dependencies);
    }
  }

  private static final class NavigationComponentImplImpl implements NavigationComponentImpl {
    private final NavigationComponentImplImpl navigationComponentImplImpl = this;

    private Provider<NavigationActivityProvider> getActivityProvider;

    private Provider<NavController> provideNavControllerProvider;

    private NavigationComponentImplImpl(NavigationModuleImpl navigationModuleImplParam,
        NavigationDependenciesImpl navigationDependenciesImplParam) {

      initialize(navigationModuleImplParam, navigationDependenciesImplParam);

    }

    private AuthorizationNavigationImpl authorizationNavigationImpl() {
      return new AuthorizationNavigationImpl(provideNavControllerProvider);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final NavigationModuleImpl navigationModuleImplParam,
        final NavigationDependenciesImpl navigationDependenciesImplParam) {
      this.getActivityProvider = new GetActivityProviderProvider(navigationDependenciesImplParam);
      this.provideNavControllerProvider = NavigationModuleImpl_ProvideNavControllerFactory.create(navigationModuleImplParam, getActivityProvider);
    }

    @Override
    public NavigationApi<AuthorizationDirections> getAuthorizationNavigationApi() {
      return authorizationNavigationImpl();
    }

    private static final class GetActivityProviderProvider implements Provider<NavigationActivityProvider> {
      private final NavigationDependenciesImpl navigationDependenciesImpl;

      GetActivityProviderProvider(NavigationDependenciesImpl navigationDependenciesImpl) {
        this.navigationDependenciesImpl = navigationDependenciesImpl;
      }

      @Override
      public NavigationActivityProvider get() {
        return Preconditions.checkNotNullFromComponent(navigationDependenciesImpl.getActivityProvider());
      }
    }
  }
}
